package com.metaexploit.testmultiplelayouts

import android.content.Context
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView

data class Header(val id: Int)
data class Question(val id: Int)
data class Button(val id: Int)

class DataAdapter(
    private val context: Context
) : RecyclerView.Adapter<DataAdapter.BaseViewHolder<*>>() {

    companion object {
        private const val TYPE_HEADER = 0
        private const val TYPE_QUESTION = 1
        private const val TYPE_BUTTON = 2
    }

    private var adapterDataList: List<Any> = emptyList()

    abstract class BaseViewHolder<T>(itemView: View) : RecyclerView.ViewHolder(itemView) {
        abstract fun bind(item: T)
    }

    inner class HeaderViewHolder(itemView: View) : BaseViewHolder<Header>(itemView) {
        override fun bind(item: Header) {}
    }

    inner class QuestionViewHolder(itemView: View) : BaseViewHolder<Question>(itemView) {
        override fun bind(item: Question) {}
    }

    inner class ButtonViewHolder(itemView: View) : BaseViewHolder<Button>(itemView) {
        override fun bind(item: Button) {}
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BaseViewHolder<*> {
        return when (viewType) {
            TYPE_HEADER -> {
                val view = LayoutInflater.from(context).inflate(R.layout.header_item, parent, false)
                HeaderViewHolder(view)
            }
            TYPE_QUESTION -> {
                val view = LayoutInflater.from(context).inflate(R.layout.question_item, parent, false)
                QuestionViewHolder(view)
            }
            TYPE_BUTTON -> {
                val view = LayoutInflater.from(context).inflate(R.layout.button_item, parent, false)
                ButtonViewHolder(view)
            }
            else -> throw IllegalArgumentException("TIPO INVÁLIDO")
        }
    }

    override fun onBindViewHolder(holder: BaseViewHolder<*>, position: Int) {
        val element = adapterDataList[position]

        when (holder) {
            is HeaderViewHolder -> holder.bind(element as Header)
            is QuestionViewHolder -> holder.bind(element as Question)
            is ButtonViewHolder -> holder.bind(element as Button)
            else -> throw IllegalArgumentException("TIPO INVÁLIDO")
        }
    }

    override fun getItemViewType(position: Int): Int {
        return when (adapterDataList[position]) {
            is Header -> TYPE_HEADER
            is Question -> TYPE_QUESTION
            is Button -> TYPE_BUTTON
            else -> throw IllegalArgumentException("Tipo inválido na posição $position")
        }
    }

    override fun getItemCount(): Int {
        return adapterDataList.size
    }

    fun setList(list: List<Any>) {
        adapterDataList = list
        notifyDataSetChanged()
    }

}